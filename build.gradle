plugins {
    id 'java'
    id 'eclipse'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.8'
    id "xyz.jpenilla.run-velocity" version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.5'
}

group = 'tw.origincraft'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
}

dependencies {
    compileOnly("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    annotationProcessor("com.velocitypowered:velocity-api:3.4.0-SNAPSHOT")
    implementation("dev.dejvokep:boosted-yaml:1.3.7")
    implementation("com.google.code.gson:gson:2.13.2")
}

shadowJar {
    // Relocate BoostedYAML to avoid potential conflicts
    relocate 'dev.dejvokep.boostedyaml', 'tw.origincraft.libs.boostedyaml'
    // Make shaded jar replace the normal jar so you can't accidentally deploy the unshaded one
    archiveClassifier.set("")
}

// Ensure the standard jar task does not overwrite the shaded jar
jar { enabled = false }

// Make build depend on shadowJar so ./gradlew build produces the shaded artifact
build.dependsOn shadowJar

tasks {
    runVelocity {
        // Configure the Velocity version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        velocityVersion("3.4.0-SNAPSHOT")
    }
}

// Use Java 21 (LTS) for Velocity compatibility (Velocity currently targets 17/21; Java 22 produced class file version 66 not supported by bundled ASM/Guice)
def targetJavaVersion = 21
java {
    toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.release.set(targetJavaVersion)
}

def templateSource = file('src/main/templates')
def templateDest = layout.buildDirectory.dir('generated/sources/templates')
def generateTemplates = tasks.register('generateTemplates', Copy) { task ->
    def props = ['version': project.version]
    task.inputs.properties props

    task.from templateSource
    task.into templateDest
    task.expand props
}

sourceSets.main.java.srcDir(generateTemplates.map { it.outputs })

project.idea.project.settings.taskTriggers.afterSync generateTemplates
project.eclipse.synchronizationTasks(generateTemplates)
